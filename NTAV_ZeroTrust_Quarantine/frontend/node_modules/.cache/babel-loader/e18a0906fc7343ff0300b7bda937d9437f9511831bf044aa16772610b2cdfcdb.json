{"ast":null,"code":"var _jsxFileName = \"C:\\\\NTAV_ZeroTrust_ERP\\\\NTAV_ZeroTrust_Quarantine\\\\frontend\\\\src\\\\pageComponents\\\\loadingPage.js\";\nimport React, { Component } from 'react';\nimport { sendInfoToServer } from '../api';\nimport withRouter from '../hocs/withRouter';\nimport '../css/loadingPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass LoadingPage extends Component {\n  constructor(props) {\n    super(props);\n    // OS 정보 추출\n    this.getOSInfo = () => {\n      const userAgent = navigator.userAgent;\n      if (userAgent.includes(\"Win\")) return \"Windows\";\n      if (userAgent.includes(\"Mac\")) return \"macOS\";\n      if (userAgent.includes(\"Linux\")) return \"Linux\";\n      return \"Unknown OS\";\n    };\n    // 브라우저 정보 추출\n    this.getBrowserInfo = () => {\n      const userAgent = navigator.userAgent;\n      if (userAgent.includes(\"Chrome\") && !userAgent.includes(\"Edg\")) return \"Chrome\";\n      if (userAgent.includes(\"Edg\")) return \"Edge\";\n      if (userAgent.includes(\"Firefox\")) return \"Firefox\";\n      if (userAgent.includes(\"Safari\") && !userAgent.includes(\"Chrome\")) return \"Safari\";\n      if (userAgent.includes(\"Brave\") || userAgent.includes(\"OPR\")) return \"Brave\";\n      return \"Unknown Browser\";\n    };\n    // 네트워크 정보 추출\n    this.getNetworkInfo = () => {\n      const isOnline = navigator.onLine ? \"Online\" : \"Offline\";\n      const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n      const networkType = connection ? connection.effectiveType : \"Unknown\";\n      const downlink = connection ? connection.downlink : \"Unknown\";\n      const rtt = connection ? connection.rtt : \"Unknown\";\n      const saveData = connection ? connection.saveData : \"Unknown\";\n      fetch('https://api.ipify.org?format=json').then(response => response.json()).then(data => {\n        console.log(\"IP Address: \", data.ip);\n      }).catch(error => console.error(\"Error fetching IP: \", error));\n      return {\n        isOnline,\n        networkType,\n        downlink,\n        rtt,\n        saveData\n      };\n    };\n    this.state = {\n      loading: true,\n      isVerified: false,\n      error: null\n    };\n    this.initialized = false;\n  }\n  // 앱 초기화 처리\n  async initializeApp() {\n    if (this.initialized) return;\n    this.initialized = true;\n\n    // 2초 대기 후 실행\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    this.setState({\n      loading: true,\n      error: null\n    });\n    const osInfo = this.getOSInfo();\n    const browserInfo = this.getBrowserInfo();\n    const networkInfo = this.getNetworkInfo();\n    console.log(\"OS Info: \", osInfo);\n    console.log(\"Browser Info: \", browserInfo);\n    console.log(\"Network Info: \", networkInfo);\n    try {\n      const response = await sendInfoToServer(osInfo, browserInfo, networkInfo);\n      console.log(\"Server Response: \", response);\n      this.setState({\n        loading: false,\n        isVerified: response.success\n      }, () => {\n        // 상태가 변경된 후에 navigate 호출\n        if (this.state.isVerified) {\n          console.log(\"Verification successful. Navigating to /exe-download\");\n          // 1.5초 후에 navigate 호출\n          setTimeout(() => {\n            this.props.navigate(\"/exe-download\");\n          }, 1500);\n        } else {\n          console.log(\"Verification failed. Navigating to /forbidden\");\n          // 1.5초 후에 navigate 호출\n          setTimeout(() => {\n            this.props.navigate(\"/forbidden\");\n          }, 4000);\n        }\n      });\n    } catch (error) {\n      console.error(\"Error during initialization: \", error);\n      this.setState({\n        loading: false,\n        error: 'Initialization failed'\n      });\n    }\n  }\n\n  // componentDidMount에서 초기화 호출\n  componentDidMount() {\n    if (this.state.loading && !this.initialized) {\n      this.initializeApp();\n    }\n  }\n  render() {\n    const {\n      loading,\n      isVerified\n    } = this.state;\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"ntav_loading.gif\",\n          alt: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: isVerified ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"ntav_loading.gif\",\n          alt: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"You have entered NTAV's quarantine zone.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Verification failed. You are not authorized to proceed.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default _c = withRouter(LoadingPage);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Component","sendInfoToServer","withRouter","jsxDEV","_jsxDEV","LoadingPage","constructor","props","getOSInfo","userAgent","navigator","includes","getBrowserInfo","getNetworkInfo","isOnline","onLine","connection","mozConnection","webkitConnection","networkType","effectiveType","downlink","rtt","saveData","fetch","then","response","json","data","console","log","ip","catch","error","state","loading","isVerified","initialized","initializeApp","Promise","resolve","setTimeout","setState","osInfo","browserInfo","networkInfo","success","navigate","componentDidMount","render","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/NTAV_ZeroTrust_ERP/NTAV_ZeroTrust_Quarantine/frontend/src/pageComponents/loadingPage.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { sendInfoToServer } from '../api';\r\nimport withRouter from '../hocs/withRouter';\r\nimport '../css/loadingPage.css';\r\n\r\nclass LoadingPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      isVerified: false,\r\n      error: null,\r\n    };\r\n    this.initialized = false;\r\n  }\r\n\r\n  // OS 정보 추출\r\n  getOSInfo = () => {\r\n    const userAgent = navigator.userAgent;\r\n    if (userAgent.includes(\"Win\")) return \"Windows\";\r\n    if (userAgent.includes(\"Mac\")) return \"macOS\";\r\n    if (userAgent.includes(\"Linux\")) return \"Linux\";\r\n    return \"Unknown OS\";\r\n  };\r\n\r\n  // 브라우저 정보 추출\r\n  getBrowserInfo = () => {\r\n    const userAgent = navigator.userAgent;\r\n    if (userAgent.includes(\"Chrome\") && !userAgent.includes(\"Edg\")) return \"Chrome\";\r\n    if (userAgent.includes(\"Edg\")) return \"Edge\";\r\n    if (userAgent.includes(\"Firefox\")) return \"Firefox\";\r\n    if (userAgent.includes(\"Safari\") && !userAgent.includes(\"Chrome\")) return \"Safari\";\r\n    if (userAgent.includes(\"Brave\") || userAgent.includes(\"OPR\")) return \"Brave\";\r\n    return \"Unknown Browser\";\r\n  };\r\n\r\n  // 네트워크 정보 추출\r\n  getNetworkInfo = () => {\r\n    const isOnline = navigator.onLine ? \"Online\" : \"Offline\";\r\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\r\n    const networkType = connection ? connection.effectiveType : \"Unknown\";\r\n    const downlink = connection ? connection.downlink : \"Unknown\";\r\n    const rtt = connection ? connection.rtt : \"Unknown\";\r\n    const saveData = connection ? connection.saveData : \"Unknown\";\r\n\r\n    fetch('https://api.ipify.org?format=json')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(\"IP Address: \", data.ip);\r\n      })\r\n      .catch(error => console.error(\"Error fetching IP: \", error));\r\n\r\n    return {\r\n      isOnline,\r\n      networkType,\r\n      downlink,\r\n      rtt,\r\n      saveData,\r\n    };\r\n  };\r\n\r\n  // 앱 초기화 처리\r\n  async initializeApp() {\r\n    if (this.initialized) return;\r\n    this.initialized = true;\r\n\r\n    // 2초 대기 후 실행\r\n    await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n    this.setState({ loading: true, error: null });\r\n\r\n    const osInfo = this.getOSInfo();\r\n    const browserInfo = this.getBrowserInfo();\r\n    const networkInfo = this.getNetworkInfo();\r\n\r\n    console.log(\"OS Info: \", osInfo);\r\n    console.log(\"Browser Info: \", browserInfo);\r\n    console.log(\"Network Info: \", networkInfo);\r\n\r\n    try {\r\n      const response = await sendInfoToServer(osInfo, browserInfo, networkInfo);\r\n      console.log(\"Server Response: \", response);\r\n\r\n      this.setState(\r\n        {\r\n          loading: false,\r\n          isVerified: response.success,\r\n        },\r\n        () => {\r\n          // 상태가 변경된 후에 navigate 호출\r\n          if (this.state.isVerified) {\r\n            console.log(\"Verification successful. Navigating to /exe-download\");          \r\n            // 1.5초 후에 navigate 호출\r\n            setTimeout(() => {\r\n              this.props.navigate(\"/exe-download\");\r\n            }, 1500); \r\n          } else {\r\n            console.log(\"Verification failed. Navigating to /forbidden\");\r\n            // 1.5초 후에 navigate 호출\r\n            setTimeout(() => {\r\n              this.props.navigate(\"/forbidden\");\r\n            }, 4000); \r\n          }\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Error during initialization: \", error);\r\n      this.setState({ loading: false, error: 'Initialization failed' });\r\n    }\r\n  }\r\n\r\n  // componentDidMount에서 초기화 호출\r\n  componentDidMount() {\r\n    if (this.state.loading && !this.initialized) {\r\n      this.initializeApp();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { loading, isVerified } = this.state;\r\n\r\n    if (loading) {\r\n      return (\r\n        <div className=\"loading-container\">\r\n          <img src=\"ntav_loading.gif\" alt=\"Loading...\" />\r\n          <p>Loading...</p>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        {isVerified ? (\r\n          <div className=\"loading-container\">\r\n          <img src=\"ntav_loading.gif\" alt=\"Loading...\" />\r\n          <p>You have entered NTAV's quarantine zone.</p>\r\n        </div>\r\n        ) : (\r\n          <header className=\"App-header\">\r\n            <p>Verification failed. You are not authorized to proceed.</p>\r\n          </header>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(LoadingPage);\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}