{"ast":null,"code":"const SERVER_URL = \"http://localhost:3002\";\nexport const sendInfoToServer = async (osInfo, browserInfo, networkInfo) => {\n  // JSON 형식으로 데이터 준비\n  // 수집한 정보 payload 객체에 저장\n  const payload = {\n    osInfo: osInfo,\n    browserInfo: browserInfo,\n    networkInfo: networkInfo\n  };\n  try {\n    console.log(\"Sending data to server...\");\n    // 디바이스 정보 전송\n    const response = await fetch(`${SERVER_URL}/api/verify-device`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json' // JSON 형식으로 전달\n      },\n      body: JSON.stringify(payload)\n    });\n    console.log(\"Payload being sent to server:\", payload);\n\n    // 서버 응답 처리\n    if (response.ok) {\n      const data = await response.json();\n      if (data.success) {\n        console.log(\"디바이스 정보 전송 성공:\", data.message);\n        console.log(data);\n        return data; // 서버에서 반환한 deviceToken 반환\n      } else {\n        console.error(\"디바이스 검증 실패:\", data.error);\n      }\n    } else {\n      console.error(\"Failed to send data\");\n    }\n  } catch (error) {\n    console.error(\"Error sending data:\", error);\n  }\n};\n\n// 서버에서 디바이스 토큰을 가져오는 함수\nexport const getDeviceToken = async () => {\n  try {\n    const response = await fetch(`${SERVER_URL}/api/environment-check`, {\n      method: \"GET\"\n      //credentials: \"include\", // 쿠키나 인증 정보를 함께 보낼 경우\n    });\n    console.log(\"Server Response:\", response); // 서버 응답 확인\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch device token\");\n    }\n    const data = await response.json();\n    console.log(\"Response Data:\", data); // JSON 응답 데이터 확인\n\n    if (data.success) {\n      return data.deviceToken; // 서버가 `{ deviceToken: \"token\" }` 형식으로 응답한다고 가정\n    } else {\n      console.error(\"디바이스 토큰 가져오기 실패:\", data.error);\n      return null;\n    }\n  } catch (error) {\n    console.error(\"Error fetching device token:\", error);\n    return null; // 실패 시 null 반환\n  }\n};","map":{"version":3,"names":["SERVER_URL","sendInfoToServer","osInfo","browserInfo","networkInfo","payload","console","log","response","fetch","method","headers","body","JSON","stringify","ok","data","json","success","message","error","getDeviceToken","Error","deviceToken"],"sources":["C:/NTAV_ZeroTrust_ERP/NTAV_ZeroTrust_Quarantine/frontend/src/api.js"],"sourcesContent":["const SERVER_URL = \"http://localhost:3002\"\r\n\r\nexport const sendInfoToServer = async (osInfo, browserInfo, networkInfo) => {\r\n    \r\n    // JSON 형식으로 데이터 준비\r\n    // 수집한 정보 payload 객체에 저장\r\n    const payload = {\r\n        osInfo: osInfo,\r\n        browserInfo: browserInfo,\r\n        networkInfo: networkInfo,\r\n      };\r\n\r\n    try {\r\n      console.log(\"Sending data to server...\");\r\n      // 디바이스 정보 전송\r\n      const response = await fetch(`${SERVER_URL}/api/verify-device`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json', // JSON 형식으로 전달\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      console.log(\"Payload being sent to server:\", payload);\r\n\r\n      // 서버 응답 처리\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        if (data.success) {\r\n          console.log(\"디바이스 정보 전송 성공:\", data.message);\r\n          console.log(data);\r\n          return data; // 서버에서 반환한 deviceToken 반환\r\n        } else {\r\n          console.error(\"디바이스 검증 실패:\", data.error);\r\n        }\r\n      } else {\r\n        console.error(\"Failed to send data\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error sending data:\", error);\r\n    }\r\n  };\r\n\r\n// 서버에서 디바이스 토큰을 가져오는 함수\r\nexport const getDeviceToken = async () => {\r\n  try {\r\n    const response = await fetch(`${SERVER_URL}/api/environment-check`, {\r\n      method: \"GET\"\r\n      //credentials: \"include\", // 쿠키나 인증 정보를 함께 보낼 경우\r\n    });\r\n\r\n    console.log(\"Server Response:\", response);  // 서버 응답 확인\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch device token\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log(\"Response Data:\", data);  // JSON 응답 데이터 확인\r\n    \r\n    if (data.success) {\r\n      return data.deviceToken; // 서버가 `{ deviceToken: \"token\" }` 형식으로 응답한다고 가정\r\n    } else {\r\n      console.error(\"디바이스 토큰 가져오기 실패:\", data.error);\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching device token:\", error);\r\n    return null; // 실패 시 null 반환\r\n  }\r\n  };"],"mappings":"AAAA,MAAMA,UAAU,GAAG,uBAAuB;AAE1C,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,EAAEC,WAAW,KAAK;EAExE;EACA;EACA,MAAMC,OAAO,GAAG;IACZH,MAAM,EAAEA,MAAM;IACdC,WAAW,EAAEA,WAAW;IACxBC,WAAW,EAAEA;EACf,CAAC;EAEH,IAAI;IACFE,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxC;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,UAAU,oBAAoB,EAAE;MAC9DU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB,CAAE;MACxC,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,OAAO;IAC9B,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,OAAO,CAAC;;IAErD;IACA,IAAIG,QAAQ,CAACO,EAAE,EAAE;MACf,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,IAAID,IAAI,CAACE,OAAO,EAAE;QAChBZ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAES,IAAI,CAACG,OAAO,CAAC;QAC3Cb,OAAO,CAACC,GAAG,CAACS,IAAI,CAAC;QACjB,OAAOA,IAAI,CAAC,CAAC;MACf,CAAC,MAAM;QACLV,OAAO,CAACc,KAAK,CAAC,aAAa,EAAEJ,IAAI,CAACI,KAAK,CAAC;MAC1C;IACF,CAAC,MAAM;MACLd,OAAO,CAACc,KAAK,CAAC,qBAAqB,CAAC;IACtC;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;EAC7C;AACF,CAAC;;AAEH;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,UAAU,wBAAwB,EAAE;MAClEU,MAAM,EAAE;MACR;IACF,CAAC,CAAC;IAEFJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,QAAQ,CAAC,CAAC,CAAE;;IAE5C,IAAI,CAACA,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIO,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEA,MAAMN,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClCX,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAES,IAAI,CAAC,CAAC,CAAE;;IAEtC,IAAIA,IAAI,CAACE,OAAO,EAAE;MAChB,OAAOF,IAAI,CAACO,WAAW,CAAC,CAAC;IAC3B,CAAC,MAAM;MACLjB,OAAO,CAACc,KAAK,CAAC,kBAAkB,EAAEJ,IAAI,CAACI,KAAK,CAAC;MAC7C,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,IAAI,CAAC,CAAC;EACf;AACA,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}