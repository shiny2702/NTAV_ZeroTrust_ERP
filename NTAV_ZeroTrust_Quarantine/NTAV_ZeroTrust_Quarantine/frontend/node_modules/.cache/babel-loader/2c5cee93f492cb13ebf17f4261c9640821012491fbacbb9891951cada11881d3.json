{"ast":null,"code":"/*import React, { Component } from \"react\";\r\nimport { getSecurityToken } from \"../api\";\r\nimport \"../css/downloadPage.css\";\r\n\r\nclass DownloadPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedFile: null, // 선택한 파일\r\n    };\r\n  }\r\n\r\n  handleDownload = (event, fileName) => {\r\n    event.preventDefault(); // 기본 다운로드 동작 방지\r\n\r\n    const userConfirmed = window.confirm(`${fileName}을(를) 다운로드하시겠습니까?`);\r\n\r\n    if (userConfirmed) {\r\n      this.setState({ selectedFile: fileName }, () => {\r\n        let downloadUrl = \"\";\r\n\r\n        // 파일 이름에 따른 다운로드 URL 설정\r\n        if (fileName === \"Windows\") {\r\n          downloadUrl = \"https://github.com/notry345/test/releases/download/test2/windows_scan.exe\";\r\n        } else if (fileName === \"macOS\") {\r\n          downloadUrl = \"https://github.com/shiny2702/NTAV_ZeroTrust_ERP/blob/seunghee/exe_dev/dev_mac/mac_scan\";\r\n        } else if (fileName === \"Linux\") {\r\n          downloadUrl = \"https://github.com/notry345/test/releases/download/untagged-1e361c96eed14322971a/linux_scan\";\r\n        }\r\n\r\n        // 일정 시간 후 다운로드 시작\r\n        setTimeout(() => {\r\n          window.location.href = downloadUrl;\r\n        }, 1500);\r\n      });\r\n    } else {\r\n      this.setState({ selectedFile: null });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { selectedFile } = this.state;\r\n\r\n    return (\r\n      <div className=\"download-container\">\r\n        <h1>파일 다운로드</h1>\r\n        <p>다운로드할 파일을 선택하세요.</p>\r\n\r\n        <ul className=\"download-links\">\r\n          <li><a onClick={(e) => this.handleDownload(e, \"Windows\")}>Windows</a></li>\r\n          <li><a onClick={(e) => this.handleDownload(e, \"macOS\")}>macOS</a></li>\r\n          <li><a onClick={(e) => this.handleDownload(e, \"Linux\")}>Linux</a></li>\r\n        </ul>\r\n        {selectedFile && <p>{selectedFile} 다운로드가 시작됩니다...</p>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DownloadPage;*/\n\nimport React, { Component } from \"react\";\nimport { getSecurityToken } from \"../api\";\nimport \"../css/downloadPage.css\";\nclass DownloadPage extends Component {\n  constructor(props) {\n    super(props);\n    this.startPollingSecurityToken = () => {\n      if (this.state.pollingInterval) return; // 이미 polling 중이면 중복 실행 방지\n\n      const interval = setInterval(() => {\n        getSecurityToken().then(token => {\n          console.log(\"보안 토큰:\", token);\n          clearInterval(this.state.pollingInterval); // 성공하면 polling 중지\n          this.setState({\n            pollingInterval: null\n          });\n        }).catch(error => console.error(\"보안 토큰 가져오기 실패:\", error));\n      }, 5000); // 5초 간격으로 요청\n\n      this.setState({\n        pollingInterval: interval\n      });\n    };\n    this.handleDownload = (event, fileName) => {\n      event.preventDefault(); // 기본 다운로드 동작 방지\n\n      const userConfirmed = window.confirm(`${fileName}을(를) 다운로드하시겠습니까?`);\n      if (userConfirmed) {\n        this.setState({\n          selectedFile: fileName\n        }, () => {\n          let downloadUrl = \"\";\n\n          // 파일 이름에 따른 다운로드 URL 설정\n          if (fileName === \"Windows\") {\n            downloadUrl = \"https://github.com/notry345/test/releases/download/test2/windows_scan.exe\";\n          } else if (fileName === \"macOS\") {\n            downloadUrl = \"https://github.com/shiny2702/NTAV_ZeroTrust_ERP/blob/seunghee/exe_dev/dev_mac/mac_scan\";\n          } else if (fileName === \"Linux\") {\n            downloadUrl = \"https://github.com/notry345/test/releases/download/untagged-1e361c96eed14322971a/linux_scan\";\n          }\n\n          // 일정 시간 후 다운로드 시작\n          setTimeout(() => {\n            window.location.href = downloadUrl;\n            this.startPollingSecurityToken(); // 다운로드 후 보안 토큰 polling 시작\n          }, 1500);\n        });\n      } else {\n        this.setState({\n          selectedFile: null\n        });\n      }\n    };\n    this.state = {\n      selectedFile: null,\n      // 선택한 파일\n      pollingInterval: null\n    };\n  }\n}\nexport default DownloadPage;","map":{"version":3,"names":["React","Component","getSecurityToken","DownloadPage","constructor","props","startPollingSecurityToken","state","pollingInterval","interval","setInterval","then","token","console","log","clearInterval","setState","catch","error","handleDownload","event","fileName","preventDefault","userConfirmed","window","confirm","selectedFile","downloadUrl","setTimeout","location","href"],"sources":["C:/NTAV_ZeroTrust_ERP/NTAV_ZeroTrust_Quarantine/frontend/src/pageComponents/downloadPage.js"],"sourcesContent":["/*import React, { Component } from \"react\";\r\nimport { getSecurityToken } from \"../api\";\r\nimport \"../css/downloadPage.css\";\r\n\r\nclass DownloadPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedFile: null, // 선택한 파일\r\n    };\r\n  }\r\n\r\n  handleDownload = (event, fileName) => {\r\n    event.preventDefault(); // 기본 다운로드 동작 방지\r\n\r\n    const userConfirmed = window.confirm(`${fileName}을(를) 다운로드하시겠습니까?`);\r\n\r\n    if (userConfirmed) {\r\n      this.setState({ selectedFile: fileName }, () => {\r\n        let downloadUrl = \"\";\r\n\r\n        // 파일 이름에 따른 다운로드 URL 설정\r\n        if (fileName === \"Windows\") {\r\n          downloadUrl = \"https://github.com/notry345/test/releases/download/test2/windows_scan.exe\";\r\n        } else if (fileName === \"macOS\") {\r\n          downloadUrl = \"https://github.com/shiny2702/NTAV_ZeroTrust_ERP/blob/seunghee/exe_dev/dev_mac/mac_scan\";\r\n        } else if (fileName === \"Linux\") {\r\n          downloadUrl = \"https://github.com/notry345/test/releases/download/untagged-1e361c96eed14322971a/linux_scan\";\r\n        }\r\n\r\n        // 일정 시간 후 다운로드 시작\r\n        setTimeout(() => {\r\n          window.location.href = downloadUrl;\r\n        }, 1500);\r\n      });\r\n    } else {\r\n      this.setState({ selectedFile: null });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { selectedFile } = this.state;\r\n\r\n    return (\r\n      <div className=\"download-container\">\r\n        <h1>파일 다운로드</h1>\r\n        <p>다운로드할 파일을 선택하세요.</p>\r\n\r\n        <ul className=\"download-links\">\r\n          <li><a onClick={(e) => this.handleDownload(e, \"Windows\")}>Windows</a></li>\r\n          <li><a onClick={(e) => this.handleDownload(e, \"macOS\")}>macOS</a></li>\r\n          <li><a onClick={(e) => this.handleDownload(e, \"Linux\")}>Linux</a></li>\r\n        </ul>\r\n        {selectedFile && <p>{selectedFile} 다운로드가 시작됩니다...</p>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DownloadPage;*/\r\n\r\nimport React, { Component } from \"react\";\r\nimport { getSecurityToken } from \"../api\";\r\nimport \"../css/downloadPage.css\";\r\n\r\nclass DownloadPage extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectedFile: null, // 선택한 파일\r\n      pollingInterval: null,\r\n    };\r\n  }\r\n\r\n  startPollingSecurityToken = () => {\r\n    if (this.state.pollingInterval) return; // 이미 polling 중이면 중복 실행 방지\r\n\r\n    const interval = setInterval(() => {\r\n      getSecurityToken()\r\n        .then(token => {\r\n          console.log(\"보안 토큰:\", token);\r\n          clearInterval(this.state.pollingInterval); // 성공하면 polling 중지\r\n          this.setState({ pollingInterval: null });\r\n        })\r\n        .catch(error => console.error(\"보안 토큰 가져오기 실패:\", error));\r\n    }, 5000); // 5초 간격으로 요청\r\n\r\n    this.setState({ pollingInterval: interval });\r\n  };\r\n\r\n  handleDownload = (event, fileName) => {\r\n    event.preventDefault(); // 기본 다운로드 동작 방지\r\n\r\n    const userConfirmed = window.confirm(`${fileName}을(를) 다운로드하시겠습니까?`);\r\n\r\n    if (userConfirmed) {\r\n      this.setState({ selectedFile: fileName }, () => {\r\n        let downloadUrl = \"\";\r\n\r\n        // 파일 이름에 따른 다운로드 URL 설정\r\n        if (fileName === \"Windows\") {\r\n          downloadUrl = \"https://github.com/notry345/test/releases/download/test2/windows_scan.exe\";\r\n        } else if (fileName === \"macOS\") {\r\n          downloadUrl = \"https://github.com/shiny2702/NTAV_ZeroTrust_ERP/blob/seunghee/exe_dev/dev_mac/mac_scan\";\r\n        } else if (fileName === \"Linux\") {\r\n          downloadUrl = \"https://github.com/notry345/test/releases/download/untagged-1e361c96eed14322971a/linux_scan\";\r\n        }\r\n\r\n        // 일정 시간 후 다운로드 시작\r\n        setTimeout(() => {\r\n          window.location.href = downloadUrl;\r\n          this.startPollingSecurityToken(); // 다운로드 후 보안 토큰 polling 시작\r\n        }, 1500);\r\n      });\r\n    } else {\r\n      this.setState({ selectedFile: null });\r\n    }\r\n  };\r\n}\r\n\r\nexport default DownloadPage;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,gBAAgB,QAAQ,QAAQ;AACzC,OAAO,yBAAyB;AAEhC,MAAMC,YAAY,SAASF,SAAS,CAAC;EACnCG,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAOfC,yBAAyB,GAAG,MAAM;MAChC,IAAI,IAAI,CAACC,KAAK,CAACC,eAAe,EAAE,OAAO,CAAC;;MAExC,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjCR,gBAAgB,CAAC,CAAC,CACfS,IAAI,CAACC,KAAK,IAAI;UACbC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,KAAK,CAAC;UAC5BG,aAAa,CAAC,IAAI,CAACR,KAAK,CAACC,eAAe,CAAC,CAAC,CAAC;UAC3C,IAAI,CAACQ,QAAQ,CAAC;YAAER,eAAe,EAAE;UAAK,CAAC,CAAC;QAC1C,CAAC,CAAC,CACDS,KAAK,CAACC,KAAK,IAAIL,OAAO,CAACK,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC,CAAC;MAC3D,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;MAEV,IAAI,CAACF,QAAQ,CAAC;QAAER,eAAe,EAAEC;MAAS,CAAC,CAAC;IAC9C,CAAC;IAAA,KAEDU,cAAc,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAK;MACpCD,KAAK,CAACE,cAAc,CAAC,CAAC,CAAC,CAAC;;MAExB,MAAMC,aAAa,GAAGC,MAAM,CAACC,OAAO,CAAC,GAAGJ,QAAQ,kBAAkB,CAAC;MAEnE,IAAIE,aAAa,EAAE;QACjB,IAAI,CAACP,QAAQ,CAAC;UAAEU,YAAY,EAAEL;QAAS,CAAC,EAAE,MAAM;UAC9C,IAAIM,WAAW,GAAG,EAAE;;UAEpB;UACA,IAAIN,QAAQ,KAAK,SAAS,EAAE;YAC1BM,WAAW,GAAG,2EAA2E;UAC3F,CAAC,MAAM,IAAIN,QAAQ,KAAK,OAAO,EAAE;YAC/BM,WAAW,GAAG,wFAAwF;UACxG,CAAC,MAAM,IAAIN,QAAQ,KAAK,OAAO,EAAE;YAC/BM,WAAW,GAAG,6FAA6F;UAC7G;;UAEA;UACAC,UAAU,CAAC,MAAM;YACfJ,MAAM,CAACK,QAAQ,CAACC,IAAI,GAAGH,WAAW;YAClC,IAAI,CAACrB,yBAAyB,CAAC,CAAC,CAAC,CAAC;UACpC,CAAC,EAAE,IAAI,CAAC;QACV,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,IAAI,CAACU,QAAQ,CAAC;UAAEU,YAAY,EAAE;QAAK,CAAC,CAAC;MACvC;IACF,CAAC;IAjDC,IAAI,CAACnB,KAAK,GAAG;MACXmB,YAAY,EAAE,IAAI;MAAE;MACpBlB,eAAe,EAAE;IACnB,CAAC;EACH;AA8CF;AAEA,eAAeL,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}